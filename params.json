{"name":"Breakmer","tagline":"A method to identify structural variation from sequencing data in target regions","body":"BreaKmer\r\n========\r\n\r\nA method to identify genomic structural variation in target regions/genes from reference-aligned high-throughput sequence data. It uses a “kmer” strategy to assemble misaligned sequence reads for predicting insertions, deletions, inversions, tandem duplications, and translocations at base-pair resolution.\r\n\r\nInstallation\r\n----------\r\n\r\nThe following are required for installation:\r\n- [Python 2.7](https://www.python.org/download/releases/2.7)\r\n\r\nDownload the python scripts and run the command:\r\n```\r\npython setup.py install\r\n```\r\nUse appropriate commands for installing locally:\r\n```\r\npython setup.py install --user\r\n```\r\n\r\nUsing the setup.py script for installation should setup the required python module dependencies for appropriate usage. If the install script is not used, the two modules need to be downloaded and installed if not already:\r\n- [Biopython 1.62](http://biopython.org/wiki/Main_Page)\r\n- [Pysam 0.6](https://code.google.com/p/pysam/)\r\n\r\nBreaKmer has currently been installed and tested on:\r\n- 64bit linux using CentOS release 5.5 and python2.7.2 \r\n- 64bit linux using Ubuntu release 14.04 and python2.7.6\r\n\r\nUsage\r\n---------\r\n\r\nList the available command line parameters.\r\n```\r\npython <PATH_TO_BREAKMER_DIR>/breakmer.py -h\r\n```\r\n\r\nAnalyze all the target genes specified in the targets bed file.\r\n```\r\npython <path to breakmer scripts>/breakmer.py <options> <path to breakmer configuration file>\r\n```\r\n\r\nAnalyze a subset of genes specified in a file.\r\n```\r\npython <path to breakmer scripts>/breakmer.py -g <file containing list of target genes to analyze> <path to breakmer configuration file>\r\n```\r\n\r\nRequirements\r\n---------\r\n\r\n### Programs\r\n- BLAT standalone and server binaries ([blat, gfServer, gfClient, faToTwoBit](http://hgdownload.cse.ucsc.edu/admin/exe/)).\r\n  - Re-alignment to reference sequence.\r\n  - Versions tested :\r\n    - standalone BLAT v35x1\r\n    - gfServer v35x1\r\n    - gfClient v35x1\r\n- [Cutadapt](https://code.google.com/p/cutadapt/)\r\n  - Trims adapter sequence from aligned reads.\r\n  - v1.5 tested\r\n- [Jellyfish](http://www.cbcb.umd.edu/software/jellyfish)\r\n  - Generating kmers.\r\n  - [v1.1.11](http://www.cbcb.umd.edu/software/jellyfish/jellyfish-1.1.11.tar.gz) tested\r\n  - [v2.1.3](http://www.genome.umd.edu/jellyfish.html) tested\r\n\r\nWhen these programs are installed, the paths to the binaries can be either be specified in the BreaKmer configuration file or put in the path (e.g. export PATH=$PATH:/path/to/binary).\r\n\r\n### Sequence data\r\n- Sample bam file\r\n  - BreaKmer requires sequence reads that have been aligned to a reference sequence in a binary alignment format (BAM). The alignment program must soft-clip or trim reads that can be partially aligned to the reference sequence (e.g., bwa, bowtie, novoalign, mosaik). The partially aligned reads and unmapped reads with mapped mates (paired-end data) are used to build contigs with potential SV. This bam file is required as input in the configuration file as the \"sample_bam_file\".\r\n    - The BAM files need to be sorted and indexed, with the indexed files in the same directory as the BAM file.\r\n    - There are a number of aligners that soft-clip partially aligned sequences, bwa and Bowtie are two well-known tools:\r\n      - [bwa](http://bio-bwa.sourceforge.net/)\r\n      - [Bowtie](http://bowtie-bio.sourceforge.net/index.shtml)\r\n    - It is also useful to mark duplicate reads prior to using BreaKmer, as these will inflate read counts for identified variants.\r\n      - [Picard MarkDuplicates](http://picard.sourceforge.net/command-line-overview.shtml#MarkDuplicates)\r\n- Normal bam file\r\n  - A matched normal with similarly targeted sequencing data as the sample can be input to help filter germline events. The sequences in the normal bam file are processed for each target in a similar manner to the sample sequences and used to further filter our kmers. This is an optional input in the configuration file as \"normal_bam_file\".\r\n\r\n### Reference data\r\n- Reference fasta file \r\n  - BreaKmer makes use of reference sequence data throughout the program. The genomic reference sequence used to align the short sequence reads is required as an input in the configuration file as the \"reference_fasta\".\r\n  - Format: single fasta file with chromosome number/id as names (i.e. '>1', '>2', '>3')\r\n  - Hg19 fasta files can be downloaded from UCSC Genome Browser(http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/)\r\n  - This file should be placed in a writeable directory. A 2bit file will be generated from this file to start the blat server.\r\n- Reference genome annotation \r\n  - This file is used by BreaKmer to annotate the locations of the breakpoints identified and the genes involved. This is required as input in the configuration file as the \"gene_annotation_file\".\r\n  - Format: tab delimited file containing a row for each RefSeq transcript with multiple columns describing the coding coordinates of the transcript.\r\n  - Hg19 RefSeq annotation file can be downloaded from UCSC Genome Browser [Table Browser](http://genome.ucsc.edu/cgi-bin/hgTables?command=start) using assembly: Feb. 2009 (GRCh37/hg19), group: Genes and Gene Predictions, track: RefSeq Genes, table: refGene\r\n- Repeat mask bed file \r\n  - This file is used by BreaKmer to determine whether breakpoints and identified variants lie within simple and low-complexity repeat regions that have been annotated. This is an optional input in the configuration file as \"repeat_mask_file\".\r\n  - Format: tab delimited file containing the coordinates for the various repeat regions.\r\n  - Hg19 repeat regions bed file can be downloaded from UCSC Genome Browser [Table Browser](http://genome.ucsc.edu/cgi-bin/hgTables?command=start) with group = Repeats, track = RepeatMasker, table = rmsk, output format: BED\r\n- Alternate reference assembly sequences \r\n  - This is an optional input in the configuration file as the \"alternate_fastas\". These are used to supplement the required reference fasta sequence and helpful for removing indel variants that exist in the reference sequence but not either of the alternate assembly sequences.\r\n  - Format: single fasta file with chromosome number/id as names (i.e. '>1', '>2', '>3')\r\n  - There are two alternate assemblies available for human, [CHM1_1.1](http://www.ncbi.nlm.nih.gov/assembly/GCF_000306695.2/) and [HuRef](http://www.ncbi.nlm.nih.gov/assembly/GCA_000002125.2).\r\n\r\n### Other files\r\n- Target regions bed file\r\n  - The target regions sequenced need to be specified in a bed file for BreaKmer to know the coordinates of the regions sequenced and which are to be analyzed. This is a required input in the configuration file as the \"targets_bed_file\".\r\n  - Format: a tab delimited file containing the chromosome, start, end, HUGO gene name, and exon/intron feature of a tile region of the genome. The tiled regions should not be overlapping.\r\n\r\nConfiguration file\r\n------------\r\n\r\n- A template configuration file with all the options is available, breakmer.cfg.\r\n- Below lists and describes the parameters that can be used in the configuration file. Do not keep commented text (i.e., #Required parameters) in the configuration file.\r\n- Note that the paths to the six required program binaries (Cutadapt, Jellyfish, blat, gfServer, and gfClient) can be set in the configuration file\r\n  or these binaries can be included in the users path (e.g., for linux users: export PATH=$PATH:/path/to/binary).\r\n- Use full paths (e.g., /home/bob and not ~/)\r\n```\r\n# Required parameters\r\nanalysis_name=<sample_id, string value that all the output files will contain>\r\ntargets_bed_file=<path to bed file containing locations of target regions>\r\nsample_bam_file=<path to sorted and indexed sample bam file>\r\nanalysis_dir=<path to analysis directory, location where analysis and final output files will be located>\r\nreference_data_dir=<path to where reference files will/are stored for each of the targeted genes analyzed> \r\ncutadapt=<path to cutadapt binary v1.5, i.e. /usr/bin/cutadapt-1.5/bin/cutadapt> \r\ncutadapt_config_file=<path to cutadapt configuration file> \r\njellyfish=<path to Jellyfish binary, i.e. /usr/bin/jellyfish>\r\nblat=<path to blat binary, i.e. /usr/bin/blat>\r\ngfserver=<path to gfServer binary, i.e. /usr/bin/gfServer>\r\ngfclient=<path to gfClient binary, i.e. /usr/bin/gfClient>\r\nfatotwobit=<path to faToTwoBit binary, i.e. /usr/bin/faToTwoBit>\r\nreference_fasta=<path to whole genome reference fasta file, one file with all records>\r\ngene_annotation_file=<path to gene annotation file, e.g., ucsc_hg19_refgene.txt>\r\nkmer_size=15\r\n\r\n# Optional parameters\r\nother_regions_file=<path to bed file containing coordinates for targeted unannotated cluster regions if they exist, such as IGH, IGK> \r\nnormal_bam_file=<path to normal bam file, can be used to filter germline events with matched-normal sample>\r\nalternate_fastas=<comma delimited list of the paths to alternate fasta files, such as HuRef or CHM1>\r\nrepeat_mask_file=<path to ucsc_hg19_rmsk.bed> # Only used when available, useful for helping filtering events in simple repeat regions.\r\n```\r\n\r\nInput file formats\r\n-----------\r\n\r\n- targets_bed_file = tab-delimited file with columns: chr, start, end, region_name, feature_name\r\n  - Each \"target\" region can contain multiple subregions that are annotated by feature type (i.e., intron, exon). These feature types are used in the filtering steps with certain parameters. Note that the minimum coordinate and maximum coordinate +/- 200 bp are used as the boundaries for each region (e.g., 45003745-200,45008540+200 for B2M).\r\n```\r\n15      45003745        45003811        B2M     exon\r\n15      45007621        45007922        B2M     exon\r\n15      45008527        45008540        B2M     exon\r\n```\r\n- other_regions_file = tab-delimited file with columns: chr, start, end, region_name\r\n   - This file is intended to cover regions that are not annotated in the annotation file. These are useful for cluster regions that are not well annotated in the annotation files.\r\n```\r\n14   22090057        23021075        TRA\r\n7    141998851       142510972       TRB\r\n```\r\n- cutadapt_config_file = each row corresponds to a parameter for cutadapt (see cutadapt.cfg example file or cutadapt documentation)\r\n  - The file provided is intended for data generated using the paired-end Illumina TruSeq library.\r\n  - Many of the Illumina library sequences have been annotated [elsewhere](https://wikis.utexas.edu/display/GSAF/Illumina+-+all+flavors).\r\n- reference_fasta = genome reference fasta formatted file containing all the chromosome reference sequences that were used to initially align the data.\r\n  - This shold be a single file containing all the sequences.\r\n- gene_annotation = Annotation file containing the location of reference genes. These can be downloaded from UCSC Genome Browser, (i.e., [hg19 refGene table](http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/))\r\n```\r\n#bin    name    chrom   strand  txStart txEnd   cdsStart        cdsEnd  exonCount       exonStarts      exonEnds        score   name2   cdsStartStat    cdsEndStat      exonFrames\r\n0       NM_032291       chr1    +       66999824        67210768        67000041        67208778        25      66999824,67091529,67098752,67101626,67105459,67108492,67109226,67126195,67\r\n133212,67136677,67137626,67138963,67142686,67145360,67147551,67154830,67155872,67161116,67184976,67194946,67199430,67205017,67206340,67206954,67208755, 67000051,67091593,67098777,6710169\r\n8,67105516,67108547,67109402,67126207,67133224,67136702,67137678,67139049,67142779,67145435,67148052,67154958,67155999,67161176,67185088,67195102,67199563,67205220,67206405,67207119,6721\r\n0768,   0       SGIP1   cmpl    cmpl    0,1,2,0,0,0,1,0,0,0,1,2,1,1,1,1,0,1,1,2,2,0,2,1,1,\r\n1       NM_032785       chr1    -       48998526        50489626        48999844        50489468        14      48998526,49000561,49005313,49052675,49056504,49100164,49119008,49128823,49\r\n332862,49511255,49711441,50162984,50317067,50489434,    48999965,49000588,49005410,49052838,49056657,49100276,49119123,49128913,49332902,49511472,49711536,50163109,50317190,50489626,  0AGBL4    cmpl    cmpl    2,2,1,0,0,2,1,1,0,2,0,1,1,0,\r\n1       NM_018090       chr1    +       16767166        16786584        16767256        16785385        8       16767166,16770126,16774364,16774554,16775587,16778332,16782312,16785336, 16767348,16770227,16774469,16774636,16775696,16778510,16782388,16786584, 0       NECAP2  cmpl    cmpl    0,2,1,1,2,0,1,2,\r\n1       NM_052998       chr1    +       33546713        33585995        33547850        33585783        12      33546713,33546988,33547201,33547778,33549554,33557650,33558882,33560148,33\r\n562307,33563667,33583502,33585644,      33546895,33547109,33547413,33547955,33549728,33557823,33559017,33560314,33562470,33563780,33583717,33585995,    0       ADC     cmpl    cmpl    -1\r\n,-1,-1,0,0,0,2,2,0,1,0,2,\r\n...\r\n```\r\n- repeat_mask_file = A BED formatted file containing repeat masked regions. These can be found from [UCSC Genome Table Browser](http://genome.ucsc.edu/cgi-bin/hgTables?hgsid=370921603_HSUaLVPi7dEbtDqCy5W1ANaqC7Fz) with group = Repeats, track = RepeatMasker, table = rmsk\r\n```\r\nchr1    16777160        16777470        AluSp   2147    +\r\nchr1    25165800        25166089        AluY    2626    -\r\nchr1    33553606        33554646        L2b     626     +\r\nchr1    50330063        50332153        L1PA10  12545   +\r\nchr1    58720067        58720973        L1PA2   8050    -\r\nchr1    75496180        75498100        L1MB7   10586   +\r\nchr1    83886030        83886750        ERVL-E-int      980     -\r\nchr1    100662895       100663391       L2a     1422    -\r\nchr1    117440426       117440514       L1ME1   532     +\r\nchr1    117440494       117441457       L1ME1   4025    +\r\n...\r\n```\r\n\r\nBreaKmer parameters\r\n-------------\r\n| Parameter | Description | Default |\r\n|---------- | ----------- | ------- |\r\n| -l, --log_level    | Logging level | Debug |\r\n| -a, --keep_repeat_regions | Keep indels in repeat regions. No repeat mask bed file required if set. | False |\r\n| -p, --preset_ref_data | Preset all the reference dta for all the target regions before running analysis. | False |\r\n| -s, --indel_size | Indel size filter | 15 |\r\n| -c, --trl_sr_thresh | Assembled read support threshold for translocations | 2 |\r\n| -d, --indel_sr_thresh | Assembled read support threshold for indels | 5 | \r\n| -r, --rearr_sr_thresh | Assembled read support threshold for inversions and tandem duplications | 3 |\r\n| -g, --gene_list | File containing a list of target region names to consider for analysis. Names must match targets_bed_file region names. | None |\r\n| -k, --keep_intron_vars | Keep indels or rearrangements with breakpoints in intron regions | False |\r\n| -v, --var_filter | Variant types to report (all, indel, trl, rearrangement) | all |\r\n| -m, --rearr_min_seg_len | Threshold for minimum segment length to be rearranged | 30 |\r\n| -n, --trl_min_seg_len | Threshold for minimum length of a translocation segment | 25 |\r\n| -t, --align_thresh | Threshold for minimum read alignment for assembly | .90 |\r\n| -z, --no_output_header | Suppress headers on output files. | False |\r\n\r\n- kmer_size = option to change the length of the kmer size used (default = 15 bp).\r\n\r\nOutput files and formats\r\n-----------\r\n\r\n- While the program is running a log file analysis_dir/log.txt will continually be updated with information regarding the status of the analysis. \r\n\r\n### Logging\r\n  - While the program is running a log file will (\\<analysis\\_directory\\>/log.txt) continually be updated with information regarding the status of the analysis.\r\n\r\n### Target data\r\n  - For each region analyzed, a directory with the name of the region, as specified in the targets bed file, is created in a 'targets' directory (\\<analysis\\_dir\\>/targets).\r\n  - Each target directory contains 'data', 'contigs', and 'kmers' directories. \r\n    - data - Contains the extracted reference-aligned reads from this target region as well as the kmers created from these extracted reads.\r\n    - contigs - Contains a directory for each contig that was created, which contains the contig sequence in fasta format, and the reads used to assemble the contig in fastq format. The BLAT results are also stored with formatted output if a SV was called.\r\n    - kmers - Contains the file with all the sample-only kmer sequences and how many reads in which it was contained as well as a file with the kmers and read ids that were used in assembling each contig.\r\n\r\n### Final output \r\n  - When the program completes, the final output files are directed into a directory labeled 'output' within the specified analysis directory. \r\n  - Summary file\r\n    - A summary file labeled \\<analysis_name\\>\\_summary.out contains columns: Target name, number of contigs assembled, total number of variants detected, number of indels, number of inversions and tandem duplications, number of translocations, and a list of translocation gene partners.\r\n  - Output for each SV type are put in respective tab-delimited files, labeled \\<analysis_name\\>\\_\\<indel,trl,inv\\_rearrangement,td\\_rearrangement\\>\\_svs.out\r\n    - The columns are:\r\n       - genes - Gene/Target names\r\n       - target_breakpoints - Target genomic breakpoints (chr:pos) (I/D<size> for indels)\r\n       - align_cigar - Re-alignment CIGAR string\r\n       - mismatches - Number of re-alignment mismatches\r\n       - strands - Strand(s) of contig when realigned\r\n       - rep_overlap_segment_len - Percentage re-alignment overlaps with repeat regions:length of aligned BLAT segments\r\n       - sv_type - Type of variation detected\r\n       - split_read_count - Number of assembled reads that cover the assembled contig at the inferred breakpoint\r\n       - nkmers - Number of kmers used to assemble the contig\r\n       - disc_read_count - Number of discordantly-mapped paired-end reads that support the event (Not applicable to indels).\r\n       - breakpoint_coverages - Number of non-duplicated reads aligned at the inferred breakpoint locations.\r\n       - contig_id - Contig ID\r\n       - contig_seq - Contig sequence. \r\n  - Each target gene in which a SV was detected has a separate output directory (\\<analysis\\_dir\\>/output/\\<target\\_name\\>) containing formatted output specific to the target and the related reference-aligned sequence reads for the contigs that contain the structural variants detected in BAM format.\r\n","google":"UA-67035322-1","note":"Don't delete this file! It's used internally to help with page regeneration."}